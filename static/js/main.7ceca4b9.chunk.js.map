{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","paddingTop","spacing","paper","padding","waited","marginTop","App","classes","orderDate","Date","deliveryDate","useState","difference","setDifference","normalizedProgress","setNormalizedProgress","elapsed","setElapsed","useEffect","differenceInDays","CssBaseline","Container","className","Paper","Grid","direction","justify","alignItems","Typography","variant","format","LinearProgress","value","formatDistanceStrict","unit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,WAAYF,EAAMG,QAAQ,IAE5BC,MAAO,CACLC,QAASL,EAAMG,QAAQ,IAEzBG,OAAQ,CACNC,UAAWP,EAAMG,QAAQ,QA6CdK,MAzCf,WACE,IAAMC,EAAUX,IAEVY,EAAY,IAAIC,KAAK,cACrBC,EAAe,IAAID,KAAK,aAJjB,EAMuBE,mBAAS,GANhC,mBAMNC,EANM,KAMMC,EANN,OAOuCF,mBAAS,GAPhD,mBAONG,EAPM,KAOcC,EAPd,OAQiBJ,mBAAS,GAR1B,mBAQNK,EARM,KAQGC,EARH,KAmBb,OATAC,qBAAU,WACRL,EAAcM,YAAiBT,EAAcF,IAC7CS,EAAWE,YAAiB,IAAIV,KAAQD,MACvC,CAACA,EAAWE,IAEfQ,qBAAU,WACRH,EAAsC,KAAfC,EAAU,IAAYJ,EAAa,MACzD,CAACA,EAAYI,IAGd,kBAAC,IAAD,KACE,kBAACI,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,UAAWf,EAAQR,WAC5B,kBAACwB,EAAA,EAAD,CAAOD,UAAWf,EAAQL,OACxB,kBAACsB,EAAA,EAAD,CAAMzB,WAAS,EAAC0B,UAAU,MAAMC,QAAQ,gBAAgBC,WAAW,UACjE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,WAAWC,YAAOtB,EAAW,WACjD,kBAACoB,EAAA,EAAD,CAAYC,QAAQ,WAAWC,YAAOpB,EAAc,YAEtD,kBAACqB,EAAA,EAAD,CAAgBF,QAAQ,cAAcG,MAAOlB,IAC7C,kBAACU,EAAA,EAAD,CAAMzB,WAAS,EAAC0B,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAASL,UAAWf,EAAQH,QACtF,kBAACwB,EAAA,EAAD,CAAYC,QAAQ,SAApB,wBACoBI,YAAqBzB,EAAW,IAAIC,KAAQ,CAAEyB,KAAM,QADxE,gBAEMD,YAAqB,IAAIxB,KAAQC,EAAc,CAAEwB,KAAM,QAF7D,6BCrCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ceca4b9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { MuiThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport { Container, CssBaseline, Grid, LinearProgress, Paper, Typography } from '@material-ui/core';\n\nimport { differenceInDays, format, formatDistanceStrict } from 'date-fns';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    paddingTop: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  waited: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const orderDate = new Date('2019-12-30');\n  const deliveryDate = new Date('2020-4-15');\n\n  const [difference, setDifference] = useState(0);\n  const [normalizedProgress, setNormalizedProgress] = useState(0);\n  const [elapsed, setElapsed] = useState(0);\n\n  useEffect(() => {\n    setDifference(differenceInDays(deliveryDate, orderDate));\n    setElapsed(differenceInDays(new Date(), orderDate));\n  }, [orderDate, deliveryDate]);\n\n  useEffect(() => {\n    setNormalizedProgress((elapsed - 0) * 100 / (difference - 0));\n  }, [difference, elapsed]);\n\n  return (\n    <MuiThemeProvider>\n      <CssBaseline />\n      <Container className={classes.container}>\n        <Paper className={classes.paper}>\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"caption\">{format(orderDate, 'MMM do')}</Typography>\n            <Typography variant=\"caption\">{format(deliveryDate, 'MMM do')}</Typography>\n          </Grid>\n          <LinearProgress variant=\"determinate\" value={normalizedProgress} />\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" className={classes.waited}>\n            <Typography variant=\"body1\">\n              {`You've waited ${formatDistanceStrict(orderDate, new Date(), { unit: 'day' })}. `}\n              {`${formatDistanceStrict(new Date(), deliveryDate, { unit: 'day' })} left to go, chill.`}\n            </Typography>\n          </Grid>\n        </Paper>\n      </Container>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}